apply plugin:"war"  

dependencies{  
    // 依赖 core 模块
    compile project(":core")  
    compile(  
            "org.springframework:spring-webmvc:$springVersion",  
            "org.apache.taglibs:taglibs-standard-impl:1.2.1"  
    )  	
    //系统提供的依赖
    providedCompile(  
            "javax.servlet:javax.servlet-api:3.1.0",  
            "javax.servlet.jsp:jsp-api:2.2.1-b03",  
            "javax.servlet.jsp.jstl:javax.servlet.jsp.jstl-api:1.2.1"  
    )  
}  
/*将src/main/java编译的class打包成${project.name}-${version}.jar放入到build/libs目录下,配置文件没必要打包*/
task jarWithoutResources(type: Jar) {  
    baseName project.name  
    from("$buildDir/classes/main")  
}  

/*1.将$projectDir/resources下的配置文件(生产上的配置文件)拷贝到WEB-INF/classes目录,不打包是为了方便修改配置*/  
/*2.将sourceSet.main下面编译的文件和资源文件剔除:*/  
//classpath=classpath - files("$buildDir/classes/main")  
//classpath=classpath - files("$buildDir/resources/main")  
/*3.将前一步打包的jar文件放入WEB-INF/lib目录下*/ 
war{  
	//自己把自己打包进去了
    //dependsOn jarWithoutResources  
    from("$projectDir/src/main/resources") {  
        //include "*.properties"  
        //include "*WEB-INF/"  
        include "**/*.*"  
        into("WEB-INF/classes")   
    }  
    classpath=classpath - sourceSets.main.output  
    classpath fileTree(dir:libsDir, include:"${project.name}-${version}.jar")  
}  
task('jarPath')<<{  
    configurations.runtime.resolve().each {  
        print it.toString()+";"  
    }  
    println();  
}